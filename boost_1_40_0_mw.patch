diff -ur boost_1_40_0/boost/python/operators.hpp boost_1_40_0.patched/boost/python/operators.hpp
--- boost_1_40_0/boost/python/operators.hpp	2010-01-13 12:09:31.000000000 -0500
+++ boost_1_40_0.patched/boost/python/operators.hpp	2010-01-14 13:19:50.000000000 -0500
@@ -54,19 +54,19 @@
   // MSVC6 doesn't want us to do this sort of inheritance on a nested
   // class template, so we use this layer of indirection to avoid
   // ::template<...> on the nested apply functions below
-  template <operator_id id, class L, class R>
+  template <operator_id id_, class L, class R>
   struct operator_l_inner
-      : operator_l<id>::template apply<L,R>
+      : operator_l<id_>::template apply<L,R>
   {};
       
-  template <operator_id id, class L, class R>
+  template <operator_id id_, class L, class R>
   struct operator_r_inner
-      : operator_r<id>::template apply<L,R>
+      : operator_r<id_>::template apply<L,R>
   {};
 
-  template <operator_id id, class T>
+  template <operator_id id_, class T>
   struct operator_1_inner
-      : operator_1<id>::template apply<T>
+      : operator_1<id_>::template apply<T>
   {};
       
   // Define three different binary_op templates which take care of
@@ -81,49 +81,49 @@
   // name().
 
   // self op self
-  template <operator_id id>
-  struct binary_op : operator_l<id>
+  template <operator_id id_>
+  struct binary_op : operator_l<id_>
   {
       template <class T>
-      struct apply : operator_l_inner<id,T,T>
+      struct apply : operator_l_inner<id_,T,T>
       {
       };
   };
 
   // self op R
-  template <operator_id id, class R>
-  struct binary_op_l : operator_l<id>
+  template <operator_id id_, class R>
+  struct binary_op_l : operator_l<id_>
   {
       template <class T>
-      struct apply : operator_l_inner<id,T,R>
+      struct apply : operator_l_inner<id_,T,R>
       {
       };
   };
 
   // L op self
-  template <operator_id id, class L>
-  struct binary_op_r : operator_r<id>
+  template <operator_id id_, class L>
+  struct binary_op_r : operator_r<id_>
   {
       template <class T>
-      struct apply : operator_r_inner<id,L,T>
+      struct apply : operator_r_inner<id_,L,T>
       {
       };
   };
 
-  template <operator_id id>
-  struct unary_op : operator_1<id>
+  template <operator_id id_>
+  struct unary_op : operator_1<id_>
   {
       template <class T>
-      struct apply : operator_1_inner<id,T>
+      struct apply : operator_1_inner<id_,T>
       {
       };
   };
 
   // This type is what actually gets returned from operators used on
   // self_t
-  template <operator_id id, class L = not_specified, class R = not_specified>
+  template <operator_id id_, class L = not_specified, class R = not_specified>
   struct operator_
-    : def_visitor<operator_<id,L,R> >
+    : def_visitor<operator_<id_,L,R> >
   {
    private:
       template <class ClassT>
@@ -133,17 +133,17 @@
               is_same<L,self_t>
             , mpl::if_<
                   is_same<R,self_t>
-                , binary_op<id>
+                , binary_op<id_>
                 , binary_op_l<
-                      id
+                      id_
                     , BOOST_DEDUCED_TYPENAME unwrap_other<R>::type
                   >
               >
             , mpl::if_<
                   is_same<L,not_specified>
-                , unary_op<id>
+                , unary_op<id_>
                 , binary_op_r<
-                      id
+                      id_
                     , BOOST_DEDUCED_TYPENAME unwrap_other<L>::type
                   >
               >
diff -ur boost_1_40_0/boost/regex/v4/basic_regex_creator.hpp boost_1_40_0.patched/boost/regex/v4/basic_regex_creator.hpp
--- boost_1_40_0/boost/regex/v4/basic_regex_creator.hpp	2010-01-13 12:09:16.000000000 -0500
+++ boost_1_40_0.patched/boost/regex/v4/basic_regex_creator.hpp	2010-01-13 16:06:36.000000000 -0500
@@ -765,14 +765,14 @@
       case syntax_element_assert_backref:
          {
             // just check that the index is valid:
-            int id = static_cast<const re_brace*>(state)->index;
-            if(id < 0)
+            int id_ = static_cast<const re_brace*>(state)->index;
+            if(id_ < 0)
             {
-               id = -id-1;
-               if(id >= 10000)
+               id_ = -id_-1;
+               if(id_ >= 10000)
                {
-                  id = m_pdata->get_id(id);
-                  if(id <= 0)
+                  id_ = m_pdata->get_id(id_);
+                  if(id_ <= 0)
                   {
                      // check of sub-expression that doesn't exist:
                      if(0 == this->m_pdata->m_status) // update the error code if not already set
@@ -800,12 +800,12 @@
          {
             bool ok = false;
             re_syntax_base* p = base;
-            int id = static_cast<re_jump*>(state)->alt.i;
-            if(id > 10000)
-               id = m_pdata->get_id(id);
+            int id_ = static_cast<re_jump*>(state)->alt.i;
+            if(id_ > 10000)
+               id_ = m_pdata->get_id(id_);
             while(p)
             {
-               if((p->type == syntax_element_startmark) && (static_cast<re_brace*>(p)->index == id))
+               if((p->type == syntax_element_startmark) && (static_cast<re_brace*>(p)->index == id_))
                {
                   static_cast<re_jump*>(state)->alt.p = p;
                   ok = true;
diff -ur boost_1_40_0/boost/regex/v4/perl_matcher.hpp boost_1_40_0.patched/boost/regex/v4/perl_matcher.hpp
--- boost_1_40_0/boost/regex/v4/perl_matcher.hpp	2010-01-13 12:09:16.000000000 -0500
+++ boost_1_40_0.patched/boost/regex/v4/perl_matcher.hpp	2010-01-13 16:09:04.000000000 -0500
@@ -331,7 +331,7 @@
 {
    typedef typename Results::value_type value_type;
    typedef typename value_type::iterator iterator;
-   int id;
+   int id_;
    const re_syntax_base* preturn_address;
    Results results;
    repeater_count<iterator>* repeater_stack;
diff -ur boost_1_40_0/boost/regex/v4/perl_matcher_common.hpp boost_1_40_0.patched/boost/regex/v4/perl_matcher_common.hpp
--- boost_1_40_0/boost/regex/v4/perl_matcher_common.hpp	2010-01-13 12:09:16.000000000 -0500
+++ boost_1_40_0.patched/boost/regex/v4/perl_matcher_common.hpp	2010-01-13 16:07:57.000000000 -0500
@@ -732,10 +732,10 @@
    {
       // Have we recursed into subexpression "index"?
       // If index == 0 then check for any recursion at all, otherwise for recursion to -index-1.
-      int id = -index-1;
-      if(id >= 10000)
-         id = re.get_data().get_id(id);
-      result = recursion_stack_position && ((recursion_stack[recursion_stack_position-1].id == id) || (index == 0));
+      int id_ = -index-1;
+      if(id_ >= 10000)
+         id_ = re.get_data().get_id(id_);
+      result = recursion_stack_position && ((recursion_stack[recursion_stack_position-1].id_ == id_) || (index == 0));
       pstate = pstate->next.p;
    }
    return result;
diff -ur boost_1_40_0/boost/regex/v4/perl_matcher_non_recursive.hpp boost_1_40_0.patched/boost/regex/v4/perl_matcher_non_recursive.hpp
--- boost_1_40_0/boost/regex/v4/perl_matcher_non_recursive.hpp	2010-01-13 12:09:16.000000000 -0500
+++ boost_1_40_0.patched/boost/regex/v4/perl_matcher_non_recursive.hpp	2010-01-13 16:10:34.000000000 -0500
@@ -905,7 +905,7 @@
    recursion_stack[recursion_stack_position].preturn_address = pstate->next.p;
    recursion_stack[recursion_stack_position].results = *m_presult;
    pstate = static_cast<const re_jump*>(pstate)->alt.p;
-   recursion_stack[recursion_stack_position].id = static_cast<const re_brace*>(pstate)->index;
+   recursion_stack[recursion_stack_position].id_ = static_cast<const re_brace*>(pstate)->index;
    ++recursion_stack_position;
    //BOOST_ASSERT(recursion_stack[recursion_stack_position-1].id);
    return true;
@@ -924,12 +924,12 @@
       }
       if(recursion_stack_position)
       {
-         if(index == recursion_stack[recursion_stack_position-1].id)
+         if(index == recursion_stack[recursion_stack_position-1].id_)
          {
             --recursion_stack_position;
             pstate = recursion_stack[recursion_stack_position].preturn_address;
             *m_presult = recursion_stack[recursion_stack_position].results;
-            push_recursion(recursion_stack[recursion_stack_position].id, recursion_stack[recursion_stack_position].preturn_address, &recursion_stack[recursion_stack_position].results);
+            push_recursion(recursion_stack[recursion_stack_position].id_, recursion_stack[recursion_stack_position].preturn_address, &recursion_stack[recursion_stack_position].results);
          }
       }
    }
@@ -948,11 +948,11 @@
 {
    if(recursion_stack_position)
    {
-      BOOST_ASSERT(0 == recursion_stack[recursion_stack_position-1].id);
+      BOOST_ASSERT(0 == recursion_stack[recursion_stack_position-1].id_);
       --recursion_stack_position;
       pstate = recursion_stack[recursion_stack_position].preturn_address;
       *m_presult = recursion_stack[recursion_stack_position].results;
-      push_recursion(recursion_stack[recursion_stack_position].id, recursion_stack[recursion_stack_position].preturn_address, &recursion_stack[recursion_stack_position].results);
+      push_recursion(recursion_stack[recursion_stack_position].id_, recursion_stack[recursion_stack_position].preturn_address, &recursion_stack[recursion_stack_position].results);
       return true;
    }
    if((m_match_flags & match_not_null) && (position == (*m_presult)[0].first))
@@ -1518,7 +1518,7 @@
    saved_recursion<results_type>* pmp = static_cast<saved_recursion<results_type>*>(m_backup_state);
    if(!r)
    {
-      recursion_stack[recursion_stack_position].id = pmp->recursion_id;
+      recursion_stack[recursion_stack_position].id_ = pmp->recursion_id;
       recursion_stack[recursion_stack_position].preturn_address = pmp->preturn_address;
       recursion_stack[recursion_stack_position].results = pmp->results;
       ++recursion_stack_position;
